<?php

namespace {{Namespace}};

use Illuminate\Database\Eloquent\SoftDeletes;
use Snap\Admin\Models\Contracts\RestorableInterface;
use Snap\Admin\Modules\ModuleModel as Model;
use Snap\Database\Model\Traits\HasPublishDate;
use Snap\Database\Model\Traits\IsRestorable;
use Snap\Database\Model\Traits\HasHierarchy;
use Snap\Database\Model\Traits\HasPrecedence;
use Snap\Database\Model\Traits\HasActive;
use Snap\Database\Model\Traits\HasUserInfo;
use Spatie\MediaLibrary\HasMedia\HasMedia;
use Spatie\MediaLibrary\HasMedia\HasMediaTrait;
use Spatie\MediaLibrary\Models\Media;
use Spatie\Sluggable\HasSlug;
use Spatie\Sluggable\SlugOptions;
use Spatie\MediaLibrary\File;

class {{ModelClass}} extends Model
{
    //use SoftDeletes;
    //use HasSlug;
    //use HasPrecedence;
    //use HasHierarchy;
    //use HasActive;
    //use HasMediaTrait; // Implement HasMedia if used
    //use IsRestorable; // Implement RestorableInterface if used
    // use HasUserInfo;


    protected $fillable = [
        //'name',
        //'slug',
    ];

    public static $rules = [
        //'name' => 'required',
        //'slug' => 'required',
    ];

    protected static $booleans = [
    ];

    protected $dates = [
    	'deleted_at'
    ];

    protected $hidden = [
    	'created_at',
    	'updated_at'
	];

    protected $sanitization = [
        '*' => 'clean_html',
    ];

    //protected $displayNameField = 'name';

    /**
     * Get the route key for the model.
     *
     * @return string
     */
    public function getRouteKeyName()
    {
        // id is needed for the admin and slug for the frontend so we check the
        // request to see if the module parameter was injected on the request which
        $actions = request()->route()->getAction();
        if (isset($actions['module'])) {
            return 'id';
        }

        return 'slug';
    }

    /**
     * Get the options for generating the slug.
     * https://github.com/spatie/laravel-sluggable
     */
    /*public function getSlugOptions(): SlugOptions
    {
        return SlugOptions::create()
				->generateSlugsFrom('name')
				->saveSlugsTo('slug')
				->doNotGenerateSlugsOnUpdate()
	        	;
    }

    public function registerMediaCollections()
    {
        $this->addMediaCollection('post-hero')->singleFile()->acceptsFile(function (File $file) {
            return $file->mimeType === 'image/jpeg' || $file->mimeType === 'image/png';
        })->registerMediaConversions(function (Media $media) {
            $this->addMediaConversion('thumb')->width(100)->height(100)->nonQueued();
        })
        ;
        //add options

    }

    public function category(): BelongsTo
    {
        return $this->belongsTo('\App\Models\Category', 'category_id');
    }

    public function image(): MorphMany
    {
        $morphMany = $this->morphMany('Snap\Media\Models\Media', 'model');
        $morphMany->where('collection_name', '=', 'post-hero');

        return $morphMany;
    }

    public function setPublishDateAttribute($date)
    {
        $ts = date('Y-m-d H:i:s', strtotime($date));
        $this->attributes['publish_date'] = ($ts) ? Carbon::parse($ts) : $date;

        return $this;
    }

    public function getDisplayImageAttribute()
    {
        return $this->image()->first();
    }*/

}
